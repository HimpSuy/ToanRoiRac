#include <stdio.h>
#include <stdlib.h>

int main() {
    int nA, nB, i, j;
    int *A, *B, *intersection, *unionSet, size1 = 0, size2 = 0;

    scanf("%d", &nA);
    A = (int*) malloc(nA * sizeof(int));
    for (i = 0; i < nA; i++) {
        scanf("%d", &A[i]);
    }

    scanf("%d", &nB);
    B = (int*) malloc(nB * sizeof(int));
    for (i = 0; i < nB; i++) {
        scanf("%d", &B[i]);
    }

    intersection = (int*) malloc(nA * sizeof(int));
    for (i = 0; i < nA; i++) {
        for (j = 0; j < nB; j++) {
            if (A[i] == B[j]) {
                intersection[size1++] = A[i];
                break;
            }
        }
    }

    if (size1 > 0) {
 
        int swapped;
        do {
            swapped = 0;
            for (i = 0; i < size1 - 1; i++) {
                if (intersection[i] > intersection[i+1]) {
                    int temp = intersection[i];
                    intersection[i] = intersection[i+1];
                    intersection[i+1] = temp;
                    swapped = 1;
                }
            }
        } while (swapped);

        printf("%d", intersection[0]);
        for (i = 1; i < size1; i++) {
            printf(" %d", intersection[i]);
        }
    } else {
        printf("none");
    }
    printf("\n");

    unionSet = (int*) malloc((nA + nB) * sizeof(int));
    for (i = 0; i < nA; i++) {
        unionSet[size2++] = A[i];
    }
    for (i = 0; i < nB; i++) {
        int found = 0;
        for (j = 0; j < nA; j++) {
            if (B[i] == A[j]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            unionSet[size2++] = B[i];
        }
    }

    int swapped;
    do {
        swapped = 0;
        for (i = 0; i < size2 - 1; i++) {
            if (unionSet[i] > unionSet[i+1]) {
                int temp = unionSet[i];
                unionSet[i] = unionSet[i+1];
                unionSet[i+1] = temp;
                swapped = 1;
            }
        }
    } while (swapped);

    printf("%d", unionSet[0]);
    for (i = 1; i < size2; i++) {
        printf(" %d", unionSet[i]);
    }

    return 0;
}
